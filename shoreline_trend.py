# -*- coding: utf-8 -*-
"""
/***************************************************************************
 shorelineChange
                                 A QGIS plugin
 This Plugin automatically extracts the shoreline given a multiband image
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-08-22
        git sha              : $Format:%H$
        copyright            : (C) 2023 by LocateIT 
        email                : info@locateit.co.ke
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from .ndwi_processing import process_ndwi_function
from qgis.core import QgsProject, Qgis, QgsProcessingContext, QgsProcessingFeedback, QgsProcessingMultiStepFeedback, QgsRasterLayer, QgsProcessing, QgsVectorLayer
from qgis import processing


# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .shoreline_trend_dialog import shorelineChangeDialog
import os.path


class shorelineChange:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'shorelineChange_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&CoGEOS')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('shorelineChange', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        # icon_path = ':/plugins/shoreline_trend/icon.png'
        self.add_action(
            #icon_path,
            QIcon(os.path.join(os.path.dirname(__file__), "icon.png")),
            text=self.tr(u'Extract Shoreline'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

        
    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&CoGEOS'),
                action)
            self.iface.removeToolBarIcon(action)

    def select_output_file(self):
        filename, _filter = QFileDialog.getSaveFileName(
            self.dlg, "Select   output file ","", '*.tif')
        self.dlg.outputLineEditNDWI.setText(filename)

    def getBandCount(self):
        rasterlayerName=self.dlg.multibandRasterComboboxNDWI.currentText()
        layers=QgsProject.instance().mapLayersByName(rasterlayerName)
        if layers:
            selectedRasterLayer=layers[0]
            print (selectedRasterLayer)
            num_bands=selectedRasterLayer.bandCount()
            
            self.dlg.greenBandComboBoxNDWI.clear()
            self.dlg.greenBandComboBoxNDWI.addItems([str(num) for num in range(1,num_bands+1)])
        
            self.dlg.nirBandComboBoxNDWI.clear()
            self.dlg.nirBandComboBoxNDWI.addItems([str(num) for num in range(1,num_bands+1)])
            return selectedRasterLayer
        else:
            print("No layers in the project")

    
    def process(self):
        # Check the selected tab
        current_tab_index=self.dlg.NDWI.tabText(self.dlg.NDWI.currentIndex())
        print(current_tab_index)
        if current_tab_index == 'Land-Water Mask(NDWI)':
            output_path = process_ndwi_function(self.dlg)
        
            if output_path is not None:
                ndwi_layer = QgsVectorLayer(output_path, "NDWI", 'ogr')
                self.iface.messageBar().pushMessage(
                    "Success", "Output file written at " + output_path,
                    level=Qgis.Success, duration=3)
                QgsProject.instance().addMapLayer(ndwi_layer)

            else:
                # NDWI calculation failed
                print("NDWI calculation failed.")
                self.iface.messageBar().pushMessage(
                    "Failed", "Imeuma inje",
                    level=Qgis.Failed, duration=3)
        else:
            print("Parameters for selected tab do not exist")

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = shorelineChangeDialog()
            self.dlg.button_box.accepted.disconnect()
            self.dlg.button_box.accepted.connect(self.process)
            self.dlg.browseOutputNDWI.clicked.connect(self.select_output_file)
            self.dlg.multibandRasterComboboxNDWI.currentIndexChanged.connect(self.getBandCount)
        
        # Fetch the currently loaded layers
        layers = QgsProject.instance().layerTreeRoot().children()
        # Clear the contents of the comboBox from previous runs
        self.dlg.multibandRasterComboboxNDWI.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.multibandRasterComboboxNDWI.addItems([layer.name() for layer in layers])
            
        # show the dialog
        self.dlg.show()
        
            
            
